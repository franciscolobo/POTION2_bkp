# Makefile.in generated by automake 1.11.1 from Makefile.am.
# tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



pkgdatadir = $(datadir)/newick-utils
pkgincludedir = $(includedir)/newick-utils
pkglibdir = $(libdir)/newick-utils
pkglibexecdir = $(libexecdir)/newick-utils
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
TESTS = test_newick_scanner$(EXEEXT) test_newick_parser$(EXEEXT) \
	test_rnode$(EXEEXT) test_list$(EXEEXT) test_link$(EXEEXT) \
	test_masprintf$(EXEEXT) test_svg_graph_radial$(EXEEXT) \
	test_canvas$(EXEEXT) test_concat$(EXEEXT) test_hash$(EXEEXT) \
	test_lca$(EXEEXT) test_enode$(EXEEXT) test_nodemap$(EXEEXT) \
	test_to_newick$(EXEEXT) test_tree$(EXEEXT) \
	test_node_set$(EXEEXT) test_rnode_iterator$(EXEEXT) \
	test_tree_models$(EXEEXT) test_xml_utils$(EXEEXT) \
	test_error$(EXEEXT) test_order_tree$(EXEEXT) \
	test_graph_common$(EXEEXT) test_subtree$(EXEEXT) \
	test_nw_reroot.sh test_nw_rename.sh test_nw_condense.sh \
	test_nw_display.sh test_nw_indent.sh test_nw_support.sh \
	test_nw_ed.sh test_nw_topology.sh test_nw_clade.sh \
	test_nw_distance.sh test_nw_labels.sh test_nw_prune.sh \
	test_nw_order.sh test_nw_match.sh test_nw_trim.sh \
	test_nw_gen.sh test_nw_duration.sh test_nw_stats.sh \
	test_nw_sched.sh test_nw_luaed.sh test_summary.sh
check_PROGRAMS = test_rnode$(EXEEXT) test_list$(EXEEXT) \
	test_link$(EXEEXT) test_newick_scanner$(EXEEXT) \
	test_canvas$(EXEEXT) test_concat$(EXEEXT) test_hash$(EXEEXT) \
	test_lca$(EXEEXT) test_nodemap$(EXEEXT) \
	test_to_newick$(EXEEXT) test_tree$(EXEEXT) \
	test_node_set$(EXEEXT) test_enode$(EXEEXT) \
	test_rnode_iterator$(EXEEXT) test_readline$(EXEEXT) \
	test_tree_models$(EXEEXT) test_xml_utils$(EXEEXT) \
	test_masprintf$(EXEEXT) test_error$(EXEEXT) \
	test_order_tree$(EXEEXT) test_graph_common$(EXEEXT) \
	test_newick_parser$(EXEEXT) test_svg_graph_radial$(EXEEXT) \
	test_subtree$(EXEEXT)
subdir = tests
DIST_COMMON = $(check_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am_test_canvas_OBJECTS = test_canvas.$(OBJEXT) canvas.$(OBJEXT)
test_canvas_OBJECTS = $(am_test_canvas_OBJECTS)
test_canvas_LDADD = $(LDADD)
am_test_concat_OBJECTS = test_concat.$(OBJEXT) concat.$(OBJEXT)
test_concat_OBJECTS = $(am_test_concat_OBJECTS)
test_concat_LDADD = $(LDADD)
am_test_enode_OBJECTS = test_enode.$(OBJEXT) enode.$(OBJEXT) \
	rnode.$(OBJEXT) link.$(OBJEXT) list.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) hash.$(OBJEXT) masprintf.$(OBJEXT)
test_enode_OBJECTS = $(am_test_enode_OBJECTS)
test_enode_LDADD = $(LDADD)
am_test_error_OBJECTS = test_error.$(OBJEXT) error.$(OBJEXT)
test_error_OBJECTS = $(am_test_error_OBJECTS)
test_error_LDADD = $(LDADD)
am_test_graph_common_OBJECTS = test_graph_common.$(OBJEXT) \
	graph_common.$(OBJEXT) tree_stubs.$(OBJEXT) link.$(OBJEXT) \
	list.$(OBJEXT) tree.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	hash.$(OBJEXT) masprintf.$(OBJEXT) rnode.$(OBJEXT) \
	nodemap.$(OBJEXT)
test_graph_common_OBJECTS = $(am_test_graph_common_OBJECTS)
test_graph_common_LDADD = $(LDADD)
am_test_hash_OBJECTS = test_hash.$(OBJEXT) hash.$(OBJEXT) \
	list.$(OBJEXT) masprintf.$(OBJEXT)
test_hash_OBJECTS = $(am_test_hash_OBJECTS)
test_hash_LDADD = $(LDADD)
am_test_lca_OBJECTS = test_lca.$(OBJEXT) lca.$(OBJEXT) list.$(OBJEXT) \
	nodemap.$(OBJEXT) link.$(OBJEXT) rnode.$(OBJEXT) \
	hash.$(OBJEXT) rnode_iterator.$(OBJEXT) tree_stubs.$(OBJEXT) \
	masprintf.$(OBJEXT) error.$(OBJEXT)
test_lca_OBJECTS = $(am_test_lca_OBJECTS)
test_lca_LDADD = $(LDADD)
am_test_link_OBJECTS = test_link.$(OBJEXT) link.$(OBJEXT) \
	nodemap.$(OBJEXT) list.$(OBJEXT) to_newick.$(OBJEXT) \
	rnode.$(OBJEXT) concat.$(OBJEXT) hash.$(OBJEXT) \
	tree_stubs.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	masprintf.$(OBJEXT)
test_link_OBJECTS = $(am_test_link_OBJECTS)
test_link_LDADD = $(LDADD)
am_test_list_OBJECTS = test_list.$(OBJEXT) list.$(OBJEXT)
test_list_OBJECTS = $(am_test_list_OBJECTS)
test_list_LDADD = $(LDADD)
am_test_masprintf_OBJECTS = test_masprintf.$(OBJEXT) \
	masprintf.$(OBJEXT)
test_masprintf_OBJECTS = $(am_test_masprintf_OBJECTS)
test_masprintf_LDADD = $(LDADD)
am_test_newick_parser_OBJECTS = test_newick_parser.$(OBJEXT) \
	parser.$(OBJEXT) newick_scanner.$(OBJEXT) \
	newick_parser.$(OBJEXT) list.$(OBJEXT) rnode.$(OBJEXT) \
	link.$(OBJEXT) hash.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	masprintf.$(OBJEXT) to_newick.$(OBJEXT) concat.$(OBJEXT)
test_newick_parser_OBJECTS = $(am_test_newick_parser_OBJECTS)
test_newick_parser_LDADD = $(LDADD)
am_test_newick_scanner_OBJECTS = test_newick_scanner.$(OBJEXT) \
	newick_scanner.$(OBJEXT) newick_parser.$(OBJEXT) \
	rnode.$(OBJEXT) rnode_iterator.$(OBJEXT) list.$(OBJEXT) \
	hash.$(OBJEXT) masprintf.$(OBJEXT) link.$(OBJEXT)
test_newick_scanner_OBJECTS = $(am_test_newick_scanner_OBJECTS)
test_newick_scanner_LDADD = $(LDADD)
am_test_node_set_OBJECTS = test_node_set.$(OBJEXT) \
	tree_stubs.$(OBJEXT) node_set.$(OBJEXT) hash.$(OBJEXT) \
	rnode.$(OBJEXT) list.$(OBJEXT) link.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) masprintf.$(OBJEXT)
test_node_set_OBJECTS = $(am_test_node_set_OBJECTS)
test_node_set_LDADD = $(LDADD)
am_test_nodemap_OBJECTS = test_nodemap.$(OBJEXT) nodemap.$(OBJEXT) \
	rnode.$(OBJEXT) list.$(OBJEXT) hash.$(OBJEXT) link.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) masprintf.$(OBJEXT) \
	tree_stubs.$(OBJEXT)
test_nodemap_OBJECTS = $(am_test_nodemap_OBJECTS)
test_nodemap_LDADD = $(LDADD)
am_test_order_tree_OBJECTS = test_order_tree.$(OBJEXT) \
	order_tree.$(OBJEXT) tree_stubs.$(OBJEXT) link.$(OBJEXT) \
	to_newick.$(OBJEXT) rnode.$(OBJEXT) list.$(OBJEXT) \
	masprintf.$(OBJEXT) concat.$(OBJEXT) hash.$(OBJEXT) \
	nodemap.$(OBJEXT) rnode_iterator.$(OBJEXT)
test_order_tree_OBJECTS = $(am_test_order_tree_OBJECTS)
test_order_tree_LDADD = $(LDADD)
am_test_readline_OBJECTS = test_readline.$(OBJEXT) readline.$(OBJEXT)
test_readline_OBJECTS = $(am_test_readline_OBJECTS)
test_readline_LDADD = $(LDADD)
am_test_rnode_OBJECTS = test_rnode.$(OBJEXT) rnode.$(OBJEXT) \
	list.$(OBJEXT) rnode_iterator.$(OBJEXT) hash.$(OBJEXT) \
	masprintf.$(OBJEXT) tree_stubs.$(OBJEXT) nodemap.$(OBJEXT) \
	link.$(OBJEXT)
test_rnode_OBJECTS = $(am_test_rnode_OBJECTS)
test_rnode_LDADD = $(LDADD)
am_test_rnode_iterator_OBJECTS = test_rnode_iterator.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) list.$(OBJEXT) link.$(OBJEXT) \
	rnode.$(OBJEXT) to_newick.$(OBJEXT) hash.$(OBJEXT) \
	nodemap.$(OBJEXT) tree_stubs.$(OBJEXT) masprintf.$(OBJEXT) \
	parser.$(OBJEXT) newick_scanner.$(OBJEXT) \
	newick_parser.$(OBJEXT) concat.$(OBJEXT)
test_rnode_iterator_OBJECTS = $(am_test_rnode_iterator_OBJECTS)
test_rnode_iterator_LDADD = $(LDADD)
am_test_subtree_OBJECTS = test_subtree.$(OBJEXT) subtree.$(OBJEXT) \
	rnode.$(OBJEXT) list.$(OBJEXT) hash.$(OBJEXT) link.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) masprintf.$(OBJEXT) nodemap.$(OBJEXT)
test_subtree_OBJECTS = $(am_test_subtree_OBJECTS)
test_subtree_LDADD = $(LDADD)
am_test_svg_graph_radial_OBJECTS = test_svg_graph_radial.$(OBJEXT) \
	svg_graph_radial.$(OBJEXT) tree.$(OBJEXT) svg_graph.$(OBJEXT) \
	rnode.$(OBJEXT) hash.$(OBJEXT) list.$(OBJEXT) \
	masprintf.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	svg_graph_ortho.$(OBJEXT) error.$(OBJEXT) readline.$(OBJEXT) \
	xml_utils.$(OBJEXT) graph_common.$(OBJEXT) \
	node_pos_alloc.$(OBJEXT) nodemap.$(OBJEXT) lca.$(OBJEXT) \
	link.$(OBJEXT)
test_svg_graph_radial_OBJECTS = $(am_test_svg_graph_radial_OBJECTS)
test_svg_graph_radial_LDADD = $(LDADD)
am_test_to_newick_OBJECTS = test_to_newick.$(OBJEXT) \
	to_newick.$(OBJEXT) rnode.$(OBJEXT) link.$(OBJEXT) \
	concat.$(OBJEXT) list.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	hash.$(OBJEXT) masprintf.$(OBJEXT) parser.$(OBJEXT) \
	newick_scanner.$(OBJEXT) newick_parser.$(OBJEXT) \
	tree_stubs.$(OBJEXT)
test_to_newick_OBJECTS = $(am_test_to_newick_OBJECTS)
test_to_newick_LDADD = $(LDADD)
am_test_tree_OBJECTS = test_tree.$(OBJEXT) tree.$(OBJEXT) \
	rnode.$(OBJEXT) list.$(OBJEXT) to_newick.$(OBJEXT) \
	nodemap.$(OBJEXT) link.$(OBJEXT) concat.$(OBJEXT) \
	hash.$(OBJEXT) tree_stubs.$(OBJEXT) rnode_iterator.$(OBJEXT) \
	masprintf.$(OBJEXT)
test_tree_OBJECTS = $(am_test_tree_OBJECTS)
test_tree_LDADD = $(LDADD)
am_test_tree_models_OBJECTS = test_tree_models.$(OBJEXT) \
	tree_models.$(OBJEXT) rnode.$(OBJEXT) list.$(OBJEXT) \
	to_newick.$(OBJEXT) link.$(OBJEXT) concat.$(OBJEXT) \
	rnode_iterator.$(OBJEXT) hash.$(OBJEXT) masprintf.$(OBJEXT)
test_tree_models_OBJECTS = $(am_test_tree_models_OBJECTS)
test_tree_models_LDADD = $(LDADD)
am_test_xml_utils_OBJECTS = test_xml_utils.$(OBJEXT) \
	xml_utils.$(OBJEXT) masprintf.$(OBJEXT)
test_xml_utils_OBJECTS = $(am_test_xml_utils_OBJECTS)
test_xml_utils_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(test_canvas_SOURCES) $(test_concat_SOURCES) \
	$(test_enode_SOURCES) $(test_error_SOURCES) \
	$(test_graph_common_SOURCES) $(test_hash_SOURCES) \
	$(test_lca_SOURCES) $(test_link_SOURCES) $(test_list_SOURCES) \
	$(test_masprintf_SOURCES) $(test_newick_parser_SOURCES) \
	$(test_newick_scanner_SOURCES) $(test_node_set_SOURCES) \
	$(test_nodemap_SOURCES) $(test_order_tree_SOURCES) \
	$(test_readline_SOURCES) $(test_rnode_SOURCES) \
	$(test_rnode_iterator_SOURCES) $(test_subtree_SOURCES) \
	$(test_svg_graph_radial_SOURCES) $(test_to_newick_SOURCES) \
	$(test_tree_SOURCES) $(test_tree_models_SOURCES) \
	$(test_xml_utils_SOURCES)
DIST_SOURCES = $(test_canvas_SOURCES) $(test_concat_SOURCES) \
	$(test_enode_SOURCES) $(test_error_SOURCES) \
	$(test_graph_common_SOURCES) $(test_hash_SOURCES) \
	$(test_lca_SOURCES) $(test_link_SOURCES) $(test_list_SOURCES) \
	$(test_masprintf_SOURCES) $(test_newick_parser_SOURCES) \
	$(test_newick_scanner_SOURCES) $(test_node_set_SOURCES) \
	$(test_nodemap_SOURCES) $(test_order_tree_SOURCES) \
	$(test_readline_SOURCES) $(test_rnode_SOURCES) \
	$(test_rnode_iterator_SOURCES) $(test_subtree_SOURCES) \
	$(test_svg_graph_radial_SOURCES) $(test_to_newick_SOURCES) \
	$(test_tree_SOURCES) $(test_tree_models_SOURCES) \
	$(test_xml_utils_SOURCES)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run aclocal-1.11
ALLOCA = 
AMTAR = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run autoconf
AUTOHEADER = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run autoheader
AUTOMAKE = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run flex
LEXLIB = 
LEX_OUTPUT_ROOT = 
LIBOBJS = 
LIBS = -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = newick-utils
PACKAGE_BUGREPORT = thomas.junier@.unige.ch
PACKAGE_NAME = Newick Utils
PACKAGE_STRING = Newick Utils 1.6
PACKAGE_TARNAME = newick-utils
PACKAGE_URL = 
PACKAGE_VERSION = 1.6
PATH_SEPARATOR = :
POW_LIB = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 1.6
YACC = yacc
YFLAGS = 
abs_builddir = /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/tests
abs_srcdir = /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/tests
abs_top_builddir = /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6
abs_top_srcdir = /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /opt/POTION_dev/POTION2/POTION2/programs/newick/newick-utils-1.6/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

# There is no real need for ../../src, but 'make distcheck' won't work without
# it. Or should this be done with VPATH?
AM_CFLAGS = -I../src -I../../src
SRCDIR = .
check_HEADERS = tree_stubs.h $(SRC)/rnode.h
SRC = $(top_builddir)/src
test_newick_scanner_SOURCES = test_newick_scanner.c $(SRC)/newick_scanner.c \
	$(SRC)/newick_parser.c $(SRC)/rnode.c $(SRC)/rnode_iterator.c \
	$(SRC)/list.c $(SRC)/hash.c $(SRC)/masprintf.c $(SRC)/link.c

test_newick_parser_SOURCES = test_newick_parser.c $(SRC)/parser.c \
	$(SRC)/newick_scanner.c $(SRC)/newick_parser.c $(SRC)/list.c \
	$(SRC)/rnode.c $(SRC)/link.c $(SRC)/hash.c $(SRC)/rnode_iterator.c \
	$(SRC)/masprintf.c $(SRC)/to_newick.c $(SRC)/concat.c

test_rnode_SOURCES = test_rnode.c $(SRC)/rnode.c $(SRC)/list.c \
	$(SRC)/rnode_iterator.c $(SRC)/hash.c $(SRC)/masprintf.c \
	tree_stubs.c $(SRC)/nodemap.c $(SRC)/link.c

test_list_SOURCES = test_list.c $(SRC)/list.c
test_link_SOURCES = test_link.c $(SRC)/link.c $(SRC)/nodemap.c \
	$(SRC)/list.c $(SRC)/to_newick.c $(SRC)/rnode.c \
	$(SRC)/concat.c $(SRC)/hash.c tree_stubs.c \
	$(SRC)/rnode_iterator.c $(SRC)/masprintf.c

test_canvas_SOURCES = test_canvas.c $(SRC)/canvas.c
test_concat_SOURCES = test_concat.c $(SRC)/concat.c
test_hash_SOURCES = test_hash.c $(SRC)/hash.c $(SRC)/list.c $(SRC)/masprintf.c
test_lca_SOURCES = test_lca.c $(SRC)/lca.c $(SRC)/list.c $(SRC)/nodemap.c \
	$(SRC)/link.c $(SRC)/rnode.c $(SRC)/hash.c \
	$(SRC)/rnode_iterator.c tree_stubs.c $(SRC)/masprintf.c \
	$(SRC)/error.c

test_nodemap_SOURCES = test_nodemap.c $(SRC)/nodemap.c \
	$(SRC)/rnode.c $(SRC)/list.c $(SRC)/hash.c $(SRC)/link.c \
	$(SRC)/rnode_iterator.c $(SRC)/masprintf.c tree_stubs.c

test_to_newick_SOURCES = test_to_newick.c $(SRC)/to_newick.c \
	$(SRC)/rnode.c $(SRC)/link.c $(SRC)/concat.c \
	$(SRC)/list.c $(SRC)/rnode_iterator.c $(SRC)/hash.c \
	$(SRC)/masprintf.c $(SRC)/parser.c $(SRC)/newick_scanner.c \
	$(SRC)/newick_parser.c tree_stubs.c

test_tree_SOURCES = test_tree.c $(SRC)/tree.c $(SRC)/rnode.c $(SRC)/list.c \
	$(SRC)/to_newick.c $(SRC)/nodemap.c $(SRC)/link.c $(SRC)/concat.c \
	$(SRC)/hash.c tree_stubs.c $(SRC)/rnode_iterator.c \
	$(SRC)/masprintf.c

test_node_set_SOURCES = test_node_set.c tree_stubs.c $(SRC)/node_set.c \
	$(SRC)/hash.c $(SRC)/rnode.c $(SRC)/list.c $(SRC)/link.c \
	$(SRC)/rnode_iterator.c $(SRC)/masprintf.c

test_enode_SOURCES = test_enode.c $(SRC)/enode.c $(SRC)/rnode.c \
	$(SRC)/link.c $(SRC)/list.c $(SRC)/rnode_iterator.c \
	$(SRC)/hash.c $(SRC)/masprintf.c

test_rnode_iterator_SOURCES = test_rnode_iterator.c $(SRC)/rnode_iterator.c \
  	$(SRC)/list.c $(SRC)/link.c $(SRC)/rnode.c $(SRC)/to_newick.c \
       	$(SRC)/hash.c $(SRC)/nodemap.c tree_stubs.c $(SRC)/masprintf.c \
	$(SRC)/parser.c $(SRC)/newick_scanner.c $(SRC)/newick_parser.c \
	$(SRC)/concat.c

test_readline_SOURCES = test_readline.c $(SRC)/readline.c
test_tree_models_SOURCES = test_tree_models.c $(SRC)/tree_models.c \
	$(SRC)/rnode.c $(SRC)/list.c $(SRC)/to_newick.c $(SRC)/link.c \
	$(SRC)/concat.c $(SRC)/rnode_iterator.c \
	$(SRC)/hash.c $(SRC)/masprintf.c

test_xml_utils_SOURCES = test_xml_utils.c $(SRC)/xml_utils.c \
	$(SRC)/masprintf.c

test_masprintf_SOURCES = test_masprintf.c $(SRC)/masprintf.c
test_error_SOURCES = test_error.c $(SRC)/error.c
test_order_tree_SOURCES = test_order_tree.c $(SRC)/order_tree.c tree_stubs.c \
	$(SRC)/link.c $(SRC)/to_newick.c $(SRC)/rnode.c $(SRC)/list.c \
	$(SRC)/masprintf.c $(SRC)/concat.c $(SRC)/hash.c $(SRC)/nodemap.c \
	$(SRC)/rnode_iterator.c

test_graph_common_SOURCES = test_graph_common.c $(SRC)/graph_common.c \
	tree_stubs.c $(SRC)/link.c $(SRC)/list.c $(SRC)/tree.c \
	$(SRC)/rnode_iterator.c $(SRC)/hash.c $(SRC)/masprintf.c \
	$(SRC)/rnode.c $(SRC)/nodemap.c

test_svg_graph_radial_SOURCES = test_svg_graph_radial.c \
	$(SRC)/svg_graph_radial.c $(SRC)/tree.c $(SRC)/svg_graph.c \
	$(SRC)/rnode.c $(SRC)/hash.c $(SRC)/list.c $(SRC)/masprintf.c \
	$(SRC)/rnode_iterator.c $(SRC)/svg_graph_ortho.c $(SRC)/error.c \
	$(SRC)/readline.c $(SRC)/xml_utils.c $(SRC)/graph_common.c \
	$(SRC)/node_pos_alloc.c $(SRC)/nodemap.c $(SRC)/lca.c $(SRC)/link.c

test_subtree_SOURCES = test_subtree.c $(SRC)/subtree.c $(SRC)/rnode.c \
	$(SRC)/list.c $(SRC)/hash.c $(SRC)/link.c $(SRC)/rnode_iterator.c \
	$(SRC)/masprintf.c $(SRC)/nodemap.c

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
test_canvas$(EXEEXT): $(test_canvas_OBJECTS) $(test_canvas_DEPENDENCIES) 
	@rm -f test_canvas$(EXEEXT)
	$(LINK) $(test_canvas_OBJECTS) $(test_canvas_LDADD) $(LIBS)
test_concat$(EXEEXT): $(test_concat_OBJECTS) $(test_concat_DEPENDENCIES) 
	@rm -f test_concat$(EXEEXT)
	$(LINK) $(test_concat_OBJECTS) $(test_concat_LDADD) $(LIBS)
test_enode$(EXEEXT): $(test_enode_OBJECTS) $(test_enode_DEPENDENCIES) 
	@rm -f test_enode$(EXEEXT)
	$(LINK) $(test_enode_OBJECTS) $(test_enode_LDADD) $(LIBS)
test_error$(EXEEXT): $(test_error_OBJECTS) $(test_error_DEPENDENCIES) 
	@rm -f test_error$(EXEEXT)
	$(LINK) $(test_error_OBJECTS) $(test_error_LDADD) $(LIBS)
test_graph_common$(EXEEXT): $(test_graph_common_OBJECTS) $(test_graph_common_DEPENDENCIES) 
	@rm -f test_graph_common$(EXEEXT)
	$(LINK) $(test_graph_common_OBJECTS) $(test_graph_common_LDADD) $(LIBS)
test_hash$(EXEEXT): $(test_hash_OBJECTS) $(test_hash_DEPENDENCIES) 
	@rm -f test_hash$(EXEEXT)
	$(LINK) $(test_hash_OBJECTS) $(test_hash_LDADD) $(LIBS)
test_lca$(EXEEXT): $(test_lca_OBJECTS) $(test_lca_DEPENDENCIES) 
	@rm -f test_lca$(EXEEXT)
	$(LINK) $(test_lca_OBJECTS) $(test_lca_LDADD) $(LIBS)
test_link$(EXEEXT): $(test_link_OBJECTS) $(test_link_DEPENDENCIES) 
	@rm -f test_link$(EXEEXT)
	$(LINK) $(test_link_OBJECTS) $(test_link_LDADD) $(LIBS)
test_list$(EXEEXT): $(test_list_OBJECTS) $(test_list_DEPENDENCIES) 
	@rm -f test_list$(EXEEXT)
	$(LINK) $(test_list_OBJECTS) $(test_list_LDADD) $(LIBS)
test_masprintf$(EXEEXT): $(test_masprintf_OBJECTS) $(test_masprintf_DEPENDENCIES) 
	@rm -f test_masprintf$(EXEEXT)
	$(LINK) $(test_masprintf_OBJECTS) $(test_masprintf_LDADD) $(LIBS)
test_newick_parser$(EXEEXT): $(test_newick_parser_OBJECTS) $(test_newick_parser_DEPENDENCIES) 
	@rm -f test_newick_parser$(EXEEXT)
	$(LINK) $(test_newick_parser_OBJECTS) $(test_newick_parser_LDADD) $(LIBS)
test_newick_scanner$(EXEEXT): $(test_newick_scanner_OBJECTS) $(test_newick_scanner_DEPENDENCIES) 
	@rm -f test_newick_scanner$(EXEEXT)
	$(LINK) $(test_newick_scanner_OBJECTS) $(test_newick_scanner_LDADD) $(LIBS)
test_node_set$(EXEEXT): $(test_node_set_OBJECTS) $(test_node_set_DEPENDENCIES) 
	@rm -f test_node_set$(EXEEXT)
	$(LINK) $(test_node_set_OBJECTS) $(test_node_set_LDADD) $(LIBS)
test_nodemap$(EXEEXT): $(test_nodemap_OBJECTS) $(test_nodemap_DEPENDENCIES) 
	@rm -f test_nodemap$(EXEEXT)
	$(LINK) $(test_nodemap_OBJECTS) $(test_nodemap_LDADD) $(LIBS)
test_order_tree$(EXEEXT): $(test_order_tree_OBJECTS) $(test_order_tree_DEPENDENCIES) 
	@rm -f test_order_tree$(EXEEXT)
	$(LINK) $(test_order_tree_OBJECTS) $(test_order_tree_LDADD) $(LIBS)
test_readline$(EXEEXT): $(test_readline_OBJECTS) $(test_readline_DEPENDENCIES) 
	@rm -f test_readline$(EXEEXT)
	$(LINK) $(test_readline_OBJECTS) $(test_readline_LDADD) $(LIBS)
test_rnode$(EXEEXT): $(test_rnode_OBJECTS) $(test_rnode_DEPENDENCIES) 
	@rm -f test_rnode$(EXEEXT)
	$(LINK) $(test_rnode_OBJECTS) $(test_rnode_LDADD) $(LIBS)
test_rnode_iterator$(EXEEXT): $(test_rnode_iterator_OBJECTS) $(test_rnode_iterator_DEPENDENCIES) 
	@rm -f test_rnode_iterator$(EXEEXT)
	$(LINK) $(test_rnode_iterator_OBJECTS) $(test_rnode_iterator_LDADD) $(LIBS)
test_subtree$(EXEEXT): $(test_subtree_OBJECTS) $(test_subtree_DEPENDENCIES) 
	@rm -f test_subtree$(EXEEXT)
	$(LINK) $(test_subtree_OBJECTS) $(test_subtree_LDADD) $(LIBS)
test_svg_graph_radial$(EXEEXT): $(test_svg_graph_radial_OBJECTS) $(test_svg_graph_radial_DEPENDENCIES) 
	@rm -f test_svg_graph_radial$(EXEEXT)
	$(LINK) $(test_svg_graph_radial_OBJECTS) $(test_svg_graph_radial_LDADD) $(LIBS)
test_to_newick$(EXEEXT): $(test_to_newick_OBJECTS) $(test_to_newick_DEPENDENCIES) 
	@rm -f test_to_newick$(EXEEXT)
	$(LINK) $(test_to_newick_OBJECTS) $(test_to_newick_LDADD) $(LIBS)
test_tree$(EXEEXT): $(test_tree_OBJECTS) $(test_tree_DEPENDENCIES) 
	@rm -f test_tree$(EXEEXT)
	$(LINK) $(test_tree_OBJECTS) $(test_tree_LDADD) $(LIBS)
test_tree_models$(EXEEXT): $(test_tree_models_OBJECTS) $(test_tree_models_DEPENDENCIES) 
	@rm -f test_tree_models$(EXEEXT)
	$(LINK) $(test_tree_models_OBJECTS) $(test_tree_models_LDADD) $(LIBS)
test_xml_utils$(EXEEXT): $(test_xml_utils_OBJECTS) $(test_xml_utils_DEPENDENCIES) 
	@rm -f test_xml_utils$(EXEEXT)
	$(LINK) $(test_xml_utils_OBJECTS) $(test_xml_utils_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/canvas.Po
include ./$(DEPDIR)/concat.Po
include ./$(DEPDIR)/enode.Po
include ./$(DEPDIR)/error.Po
include ./$(DEPDIR)/graph_common.Po
include ./$(DEPDIR)/hash.Po
include ./$(DEPDIR)/lca.Po
include ./$(DEPDIR)/link.Po
include ./$(DEPDIR)/list.Po
include ./$(DEPDIR)/masprintf.Po
include ./$(DEPDIR)/newick_parser.Po
include ./$(DEPDIR)/newick_scanner.Po
include ./$(DEPDIR)/node_pos_alloc.Po
include ./$(DEPDIR)/node_set.Po
include ./$(DEPDIR)/nodemap.Po
include ./$(DEPDIR)/order_tree.Po
include ./$(DEPDIR)/parser.Po
include ./$(DEPDIR)/readline.Po
include ./$(DEPDIR)/rnode.Po
include ./$(DEPDIR)/rnode_iterator.Po
include ./$(DEPDIR)/subtree.Po
include ./$(DEPDIR)/svg_graph.Po
include ./$(DEPDIR)/svg_graph_ortho.Po
include ./$(DEPDIR)/svg_graph_radial.Po
include ./$(DEPDIR)/test_canvas.Po
include ./$(DEPDIR)/test_concat.Po
include ./$(DEPDIR)/test_enode.Po
include ./$(DEPDIR)/test_error.Po
include ./$(DEPDIR)/test_graph_common.Po
include ./$(DEPDIR)/test_hash.Po
include ./$(DEPDIR)/test_lca.Po
include ./$(DEPDIR)/test_link.Po
include ./$(DEPDIR)/test_list.Po
include ./$(DEPDIR)/test_masprintf.Po
include ./$(DEPDIR)/test_newick_parser.Po
include ./$(DEPDIR)/test_newick_scanner.Po
include ./$(DEPDIR)/test_node_set.Po
include ./$(DEPDIR)/test_nodemap.Po
include ./$(DEPDIR)/test_order_tree.Po
include ./$(DEPDIR)/test_readline.Po
include ./$(DEPDIR)/test_rnode.Po
include ./$(DEPDIR)/test_rnode_iterator.Po
include ./$(DEPDIR)/test_subtree.Po
include ./$(DEPDIR)/test_svg_graph_radial.Po
include ./$(DEPDIR)/test_to_newick.Po
include ./$(DEPDIR)/test_tree.Po
include ./$(DEPDIR)/test_tree_models.Po
include ./$(DEPDIR)/test_xml_utils.Po
include ./$(DEPDIR)/to_newick.Po
include ./$(DEPDIR)/tree.Po
include ./$(DEPDIR)/tree_models.Po
include ./$(DEPDIR)/tree_stubs.Po
include ./$(DEPDIR)/xml_utils.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

canvas.o: $(SRC)/canvas.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT canvas.o -MD -MP -MF $(DEPDIR)/canvas.Tpo -c -o canvas.o `test -f '$(SRC)/canvas.c' || echo '$(srcdir)/'`$(SRC)/canvas.c
	$(am__mv) $(DEPDIR)/canvas.Tpo $(DEPDIR)/canvas.Po
#	source='$(SRC)/canvas.c' object='canvas.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o canvas.o `test -f '$(SRC)/canvas.c' || echo '$(srcdir)/'`$(SRC)/canvas.c

canvas.obj: $(SRC)/canvas.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT canvas.obj -MD -MP -MF $(DEPDIR)/canvas.Tpo -c -o canvas.obj `if test -f '$(SRC)/canvas.c'; then $(CYGPATH_W) '$(SRC)/canvas.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/canvas.c'; fi`
	$(am__mv) $(DEPDIR)/canvas.Tpo $(DEPDIR)/canvas.Po
#	source='$(SRC)/canvas.c' object='canvas.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o canvas.obj `if test -f '$(SRC)/canvas.c'; then $(CYGPATH_W) '$(SRC)/canvas.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/canvas.c'; fi`

concat.o: $(SRC)/concat.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT concat.o -MD -MP -MF $(DEPDIR)/concat.Tpo -c -o concat.o `test -f '$(SRC)/concat.c' || echo '$(srcdir)/'`$(SRC)/concat.c
	$(am__mv) $(DEPDIR)/concat.Tpo $(DEPDIR)/concat.Po
#	source='$(SRC)/concat.c' object='concat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o concat.o `test -f '$(SRC)/concat.c' || echo '$(srcdir)/'`$(SRC)/concat.c

concat.obj: $(SRC)/concat.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT concat.obj -MD -MP -MF $(DEPDIR)/concat.Tpo -c -o concat.obj `if test -f '$(SRC)/concat.c'; then $(CYGPATH_W) '$(SRC)/concat.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/concat.c'; fi`
	$(am__mv) $(DEPDIR)/concat.Tpo $(DEPDIR)/concat.Po
#	source='$(SRC)/concat.c' object='concat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o concat.obj `if test -f '$(SRC)/concat.c'; then $(CYGPATH_W) '$(SRC)/concat.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/concat.c'; fi`

enode.o: $(SRC)/enode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT enode.o -MD -MP -MF $(DEPDIR)/enode.Tpo -c -o enode.o `test -f '$(SRC)/enode.c' || echo '$(srcdir)/'`$(SRC)/enode.c
	$(am__mv) $(DEPDIR)/enode.Tpo $(DEPDIR)/enode.Po
#	source='$(SRC)/enode.c' object='enode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o enode.o `test -f '$(SRC)/enode.c' || echo '$(srcdir)/'`$(SRC)/enode.c

enode.obj: $(SRC)/enode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT enode.obj -MD -MP -MF $(DEPDIR)/enode.Tpo -c -o enode.obj `if test -f '$(SRC)/enode.c'; then $(CYGPATH_W) '$(SRC)/enode.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/enode.c'; fi`
	$(am__mv) $(DEPDIR)/enode.Tpo $(DEPDIR)/enode.Po
#	source='$(SRC)/enode.c' object='enode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o enode.obj `if test -f '$(SRC)/enode.c'; then $(CYGPATH_W) '$(SRC)/enode.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/enode.c'; fi`

rnode.o: $(SRC)/rnode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rnode.o -MD -MP -MF $(DEPDIR)/rnode.Tpo -c -o rnode.o `test -f '$(SRC)/rnode.c' || echo '$(srcdir)/'`$(SRC)/rnode.c
	$(am__mv) $(DEPDIR)/rnode.Tpo $(DEPDIR)/rnode.Po
#	source='$(SRC)/rnode.c' object='rnode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rnode.o `test -f '$(SRC)/rnode.c' || echo '$(srcdir)/'`$(SRC)/rnode.c

rnode.obj: $(SRC)/rnode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rnode.obj -MD -MP -MF $(DEPDIR)/rnode.Tpo -c -o rnode.obj `if test -f '$(SRC)/rnode.c'; then $(CYGPATH_W) '$(SRC)/rnode.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/rnode.c'; fi`
	$(am__mv) $(DEPDIR)/rnode.Tpo $(DEPDIR)/rnode.Po
#	source='$(SRC)/rnode.c' object='rnode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rnode.obj `if test -f '$(SRC)/rnode.c'; then $(CYGPATH_W) '$(SRC)/rnode.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/rnode.c'; fi`

link.o: $(SRC)/link.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT link.o -MD -MP -MF $(DEPDIR)/link.Tpo -c -o link.o `test -f '$(SRC)/link.c' || echo '$(srcdir)/'`$(SRC)/link.c
	$(am__mv) $(DEPDIR)/link.Tpo $(DEPDIR)/link.Po
#	source='$(SRC)/link.c' object='link.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o link.o `test -f '$(SRC)/link.c' || echo '$(srcdir)/'`$(SRC)/link.c

link.obj: $(SRC)/link.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT link.obj -MD -MP -MF $(DEPDIR)/link.Tpo -c -o link.obj `if test -f '$(SRC)/link.c'; then $(CYGPATH_W) '$(SRC)/link.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/link.c'; fi`
	$(am__mv) $(DEPDIR)/link.Tpo $(DEPDIR)/link.Po
#	source='$(SRC)/link.c' object='link.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o link.obj `if test -f '$(SRC)/link.c'; then $(CYGPATH_W) '$(SRC)/link.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/link.c'; fi`

list.o: $(SRC)/list.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT list.o -MD -MP -MF $(DEPDIR)/list.Tpo -c -o list.o `test -f '$(SRC)/list.c' || echo '$(srcdir)/'`$(SRC)/list.c
	$(am__mv) $(DEPDIR)/list.Tpo $(DEPDIR)/list.Po
#	source='$(SRC)/list.c' object='list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o list.o `test -f '$(SRC)/list.c' || echo '$(srcdir)/'`$(SRC)/list.c

list.obj: $(SRC)/list.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT list.obj -MD -MP -MF $(DEPDIR)/list.Tpo -c -o list.obj `if test -f '$(SRC)/list.c'; then $(CYGPATH_W) '$(SRC)/list.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/list.c'; fi`
	$(am__mv) $(DEPDIR)/list.Tpo $(DEPDIR)/list.Po
#	source='$(SRC)/list.c' object='list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o list.obj `if test -f '$(SRC)/list.c'; then $(CYGPATH_W) '$(SRC)/list.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/list.c'; fi`

rnode_iterator.o: $(SRC)/rnode_iterator.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rnode_iterator.o -MD -MP -MF $(DEPDIR)/rnode_iterator.Tpo -c -o rnode_iterator.o `test -f '$(SRC)/rnode_iterator.c' || echo '$(srcdir)/'`$(SRC)/rnode_iterator.c
	$(am__mv) $(DEPDIR)/rnode_iterator.Tpo $(DEPDIR)/rnode_iterator.Po
#	source='$(SRC)/rnode_iterator.c' object='rnode_iterator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rnode_iterator.o `test -f '$(SRC)/rnode_iterator.c' || echo '$(srcdir)/'`$(SRC)/rnode_iterator.c

rnode_iterator.obj: $(SRC)/rnode_iterator.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT rnode_iterator.obj -MD -MP -MF $(DEPDIR)/rnode_iterator.Tpo -c -o rnode_iterator.obj `if test -f '$(SRC)/rnode_iterator.c'; then $(CYGPATH_W) '$(SRC)/rnode_iterator.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/rnode_iterator.c'; fi`
	$(am__mv) $(DEPDIR)/rnode_iterator.Tpo $(DEPDIR)/rnode_iterator.Po
#	source='$(SRC)/rnode_iterator.c' object='rnode_iterator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rnode_iterator.obj `if test -f '$(SRC)/rnode_iterator.c'; then $(CYGPATH_W) '$(SRC)/rnode_iterator.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/rnode_iterator.c'; fi`

hash.o: $(SRC)/hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT hash.o -MD -MP -MF $(DEPDIR)/hash.Tpo -c -o hash.o `test -f '$(SRC)/hash.c' || echo '$(srcdir)/'`$(SRC)/hash.c
	$(am__mv) $(DEPDIR)/hash.Tpo $(DEPDIR)/hash.Po
#	source='$(SRC)/hash.c' object='hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hash.o `test -f '$(SRC)/hash.c' || echo '$(srcdir)/'`$(SRC)/hash.c

hash.obj: $(SRC)/hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT hash.obj -MD -MP -MF $(DEPDIR)/hash.Tpo -c -o hash.obj `if test -f '$(SRC)/hash.c'; then $(CYGPATH_W) '$(SRC)/hash.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/hash.c'; fi`
	$(am__mv) $(DEPDIR)/hash.Tpo $(DEPDIR)/hash.Po
#	source='$(SRC)/hash.c' object='hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hash.obj `if test -f '$(SRC)/hash.c'; then $(CYGPATH_W) '$(SRC)/hash.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/hash.c'; fi`

masprintf.o: $(SRC)/masprintf.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT masprintf.o -MD -MP -MF $(DEPDIR)/masprintf.Tpo -c -o masprintf.o `test -f '$(SRC)/masprintf.c' || echo '$(srcdir)/'`$(SRC)/masprintf.c
	$(am__mv) $(DEPDIR)/masprintf.Tpo $(DEPDIR)/masprintf.Po
#	source='$(SRC)/masprintf.c' object='masprintf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o masprintf.o `test -f '$(SRC)/masprintf.c' || echo '$(srcdir)/'`$(SRC)/masprintf.c

masprintf.obj: $(SRC)/masprintf.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT masprintf.obj -MD -MP -MF $(DEPDIR)/masprintf.Tpo -c -o masprintf.obj `if test -f '$(SRC)/masprintf.c'; then $(CYGPATH_W) '$(SRC)/masprintf.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/masprintf.c'; fi`
	$(am__mv) $(DEPDIR)/masprintf.Tpo $(DEPDIR)/masprintf.Po
#	source='$(SRC)/masprintf.c' object='masprintf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o masprintf.obj `if test -f '$(SRC)/masprintf.c'; then $(CYGPATH_W) '$(SRC)/masprintf.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/masprintf.c'; fi`

error.o: $(SRC)/error.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT error.o -MD -MP -MF $(DEPDIR)/error.Tpo -c -o error.o `test -f '$(SRC)/error.c' || echo '$(srcdir)/'`$(SRC)/error.c
	$(am__mv) $(DEPDIR)/error.Tpo $(DEPDIR)/error.Po
#	source='$(SRC)/error.c' object='error.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o error.o `test -f '$(SRC)/error.c' || echo '$(srcdir)/'`$(SRC)/error.c

error.obj: $(SRC)/error.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT error.obj -MD -MP -MF $(DEPDIR)/error.Tpo -c -o error.obj `if test -f '$(SRC)/error.c'; then $(CYGPATH_W) '$(SRC)/error.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/error.c'; fi`
	$(am__mv) $(DEPDIR)/error.Tpo $(DEPDIR)/error.Po
#	source='$(SRC)/error.c' object='error.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o error.obj `if test -f '$(SRC)/error.c'; then $(CYGPATH_W) '$(SRC)/error.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/error.c'; fi`

graph_common.o: $(SRC)/graph_common.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT graph_common.o -MD -MP -MF $(DEPDIR)/graph_common.Tpo -c -o graph_common.o `test -f '$(SRC)/graph_common.c' || echo '$(srcdir)/'`$(SRC)/graph_common.c
	$(am__mv) $(DEPDIR)/graph_common.Tpo $(DEPDIR)/graph_common.Po
#	source='$(SRC)/graph_common.c' object='graph_common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o graph_common.o `test -f '$(SRC)/graph_common.c' || echo '$(srcdir)/'`$(SRC)/graph_common.c

graph_common.obj: $(SRC)/graph_common.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT graph_common.obj -MD -MP -MF $(DEPDIR)/graph_common.Tpo -c -o graph_common.obj `if test -f '$(SRC)/graph_common.c'; then $(CYGPATH_W) '$(SRC)/graph_common.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/graph_common.c'; fi`
	$(am__mv) $(DEPDIR)/graph_common.Tpo $(DEPDIR)/graph_common.Po
#	source='$(SRC)/graph_common.c' object='graph_common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o graph_common.obj `if test -f '$(SRC)/graph_common.c'; then $(CYGPATH_W) '$(SRC)/graph_common.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/graph_common.c'; fi`

tree.o: $(SRC)/tree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tree.o -MD -MP -MF $(DEPDIR)/tree.Tpo -c -o tree.o `test -f '$(SRC)/tree.c' || echo '$(srcdir)/'`$(SRC)/tree.c
	$(am__mv) $(DEPDIR)/tree.Tpo $(DEPDIR)/tree.Po
#	source='$(SRC)/tree.c' object='tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tree.o `test -f '$(SRC)/tree.c' || echo '$(srcdir)/'`$(SRC)/tree.c

tree.obj: $(SRC)/tree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tree.obj -MD -MP -MF $(DEPDIR)/tree.Tpo -c -o tree.obj `if test -f '$(SRC)/tree.c'; then $(CYGPATH_W) '$(SRC)/tree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/tree.c'; fi`
	$(am__mv) $(DEPDIR)/tree.Tpo $(DEPDIR)/tree.Po
#	source='$(SRC)/tree.c' object='tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tree.obj `if test -f '$(SRC)/tree.c'; then $(CYGPATH_W) '$(SRC)/tree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/tree.c'; fi`

nodemap.o: $(SRC)/nodemap.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT nodemap.o -MD -MP -MF $(DEPDIR)/nodemap.Tpo -c -o nodemap.o `test -f '$(SRC)/nodemap.c' || echo '$(srcdir)/'`$(SRC)/nodemap.c
	$(am__mv) $(DEPDIR)/nodemap.Tpo $(DEPDIR)/nodemap.Po
#	source='$(SRC)/nodemap.c' object='nodemap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o nodemap.o `test -f '$(SRC)/nodemap.c' || echo '$(srcdir)/'`$(SRC)/nodemap.c

nodemap.obj: $(SRC)/nodemap.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT nodemap.obj -MD -MP -MF $(DEPDIR)/nodemap.Tpo -c -o nodemap.obj `if test -f '$(SRC)/nodemap.c'; then $(CYGPATH_W) '$(SRC)/nodemap.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/nodemap.c'; fi`
	$(am__mv) $(DEPDIR)/nodemap.Tpo $(DEPDIR)/nodemap.Po
#	source='$(SRC)/nodemap.c' object='nodemap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o nodemap.obj `if test -f '$(SRC)/nodemap.c'; then $(CYGPATH_W) '$(SRC)/nodemap.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/nodemap.c'; fi`

lca.o: $(SRC)/lca.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lca.o -MD -MP -MF $(DEPDIR)/lca.Tpo -c -o lca.o `test -f '$(SRC)/lca.c' || echo '$(srcdir)/'`$(SRC)/lca.c
	$(am__mv) $(DEPDIR)/lca.Tpo $(DEPDIR)/lca.Po
#	source='$(SRC)/lca.c' object='lca.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lca.o `test -f '$(SRC)/lca.c' || echo '$(srcdir)/'`$(SRC)/lca.c

lca.obj: $(SRC)/lca.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lca.obj -MD -MP -MF $(DEPDIR)/lca.Tpo -c -o lca.obj `if test -f '$(SRC)/lca.c'; then $(CYGPATH_W) '$(SRC)/lca.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/lca.c'; fi`
	$(am__mv) $(DEPDIR)/lca.Tpo $(DEPDIR)/lca.Po
#	source='$(SRC)/lca.c' object='lca.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lca.obj `if test -f '$(SRC)/lca.c'; then $(CYGPATH_W) '$(SRC)/lca.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/lca.c'; fi`

to_newick.o: $(SRC)/to_newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT to_newick.o -MD -MP -MF $(DEPDIR)/to_newick.Tpo -c -o to_newick.o `test -f '$(SRC)/to_newick.c' || echo '$(srcdir)/'`$(SRC)/to_newick.c
	$(am__mv) $(DEPDIR)/to_newick.Tpo $(DEPDIR)/to_newick.Po
#	source='$(SRC)/to_newick.c' object='to_newick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o to_newick.o `test -f '$(SRC)/to_newick.c' || echo '$(srcdir)/'`$(SRC)/to_newick.c

to_newick.obj: $(SRC)/to_newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT to_newick.obj -MD -MP -MF $(DEPDIR)/to_newick.Tpo -c -o to_newick.obj `if test -f '$(SRC)/to_newick.c'; then $(CYGPATH_W) '$(SRC)/to_newick.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/to_newick.c'; fi`
	$(am__mv) $(DEPDIR)/to_newick.Tpo $(DEPDIR)/to_newick.Po
#	source='$(SRC)/to_newick.c' object='to_newick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o to_newick.obj `if test -f '$(SRC)/to_newick.c'; then $(CYGPATH_W) '$(SRC)/to_newick.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/to_newick.c'; fi`

parser.o: $(SRC)/parser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parser.o -MD -MP -MF $(DEPDIR)/parser.Tpo -c -o parser.o `test -f '$(SRC)/parser.c' || echo '$(srcdir)/'`$(SRC)/parser.c
	$(am__mv) $(DEPDIR)/parser.Tpo $(DEPDIR)/parser.Po
#	source='$(SRC)/parser.c' object='parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parser.o `test -f '$(SRC)/parser.c' || echo '$(srcdir)/'`$(SRC)/parser.c

parser.obj: $(SRC)/parser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parser.obj -MD -MP -MF $(DEPDIR)/parser.Tpo -c -o parser.obj `if test -f '$(SRC)/parser.c'; then $(CYGPATH_W) '$(SRC)/parser.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/parser.c'; fi`
	$(am__mv) $(DEPDIR)/parser.Tpo $(DEPDIR)/parser.Po
#	source='$(SRC)/parser.c' object='parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parser.obj `if test -f '$(SRC)/parser.c'; then $(CYGPATH_W) '$(SRC)/parser.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/parser.c'; fi`

newick_scanner.o: $(SRC)/newick_scanner.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT newick_scanner.o -MD -MP -MF $(DEPDIR)/newick_scanner.Tpo -c -o newick_scanner.o `test -f '$(SRC)/newick_scanner.c' || echo '$(srcdir)/'`$(SRC)/newick_scanner.c
	$(am__mv) $(DEPDIR)/newick_scanner.Tpo $(DEPDIR)/newick_scanner.Po
#	source='$(SRC)/newick_scanner.c' object='newick_scanner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o newick_scanner.o `test -f '$(SRC)/newick_scanner.c' || echo '$(srcdir)/'`$(SRC)/newick_scanner.c

newick_scanner.obj: $(SRC)/newick_scanner.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT newick_scanner.obj -MD -MP -MF $(DEPDIR)/newick_scanner.Tpo -c -o newick_scanner.obj `if test -f '$(SRC)/newick_scanner.c'; then $(CYGPATH_W) '$(SRC)/newick_scanner.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/newick_scanner.c'; fi`
	$(am__mv) $(DEPDIR)/newick_scanner.Tpo $(DEPDIR)/newick_scanner.Po
#	source='$(SRC)/newick_scanner.c' object='newick_scanner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o newick_scanner.obj `if test -f '$(SRC)/newick_scanner.c'; then $(CYGPATH_W) '$(SRC)/newick_scanner.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/newick_scanner.c'; fi`

newick_parser.o: $(SRC)/newick_parser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT newick_parser.o -MD -MP -MF $(DEPDIR)/newick_parser.Tpo -c -o newick_parser.o `test -f '$(SRC)/newick_parser.c' || echo '$(srcdir)/'`$(SRC)/newick_parser.c
	$(am__mv) $(DEPDIR)/newick_parser.Tpo $(DEPDIR)/newick_parser.Po
#	source='$(SRC)/newick_parser.c' object='newick_parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o newick_parser.o `test -f '$(SRC)/newick_parser.c' || echo '$(srcdir)/'`$(SRC)/newick_parser.c

newick_parser.obj: $(SRC)/newick_parser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT newick_parser.obj -MD -MP -MF $(DEPDIR)/newick_parser.Tpo -c -o newick_parser.obj `if test -f '$(SRC)/newick_parser.c'; then $(CYGPATH_W) '$(SRC)/newick_parser.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/newick_parser.c'; fi`
	$(am__mv) $(DEPDIR)/newick_parser.Tpo $(DEPDIR)/newick_parser.Po
#	source='$(SRC)/newick_parser.c' object='newick_parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o newick_parser.obj `if test -f '$(SRC)/newick_parser.c'; then $(CYGPATH_W) '$(SRC)/newick_parser.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/newick_parser.c'; fi`

node_set.o: $(SRC)/node_set.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT node_set.o -MD -MP -MF $(DEPDIR)/node_set.Tpo -c -o node_set.o `test -f '$(SRC)/node_set.c' || echo '$(srcdir)/'`$(SRC)/node_set.c
	$(am__mv) $(DEPDIR)/node_set.Tpo $(DEPDIR)/node_set.Po
#	source='$(SRC)/node_set.c' object='node_set.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o node_set.o `test -f '$(SRC)/node_set.c' || echo '$(srcdir)/'`$(SRC)/node_set.c

node_set.obj: $(SRC)/node_set.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT node_set.obj -MD -MP -MF $(DEPDIR)/node_set.Tpo -c -o node_set.obj `if test -f '$(SRC)/node_set.c'; then $(CYGPATH_W) '$(SRC)/node_set.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/node_set.c'; fi`
	$(am__mv) $(DEPDIR)/node_set.Tpo $(DEPDIR)/node_set.Po
#	source='$(SRC)/node_set.c' object='node_set.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o node_set.obj `if test -f '$(SRC)/node_set.c'; then $(CYGPATH_W) '$(SRC)/node_set.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/node_set.c'; fi`

order_tree.o: $(SRC)/order_tree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT order_tree.o -MD -MP -MF $(DEPDIR)/order_tree.Tpo -c -o order_tree.o `test -f '$(SRC)/order_tree.c' || echo '$(srcdir)/'`$(SRC)/order_tree.c
	$(am__mv) $(DEPDIR)/order_tree.Tpo $(DEPDIR)/order_tree.Po
#	source='$(SRC)/order_tree.c' object='order_tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o order_tree.o `test -f '$(SRC)/order_tree.c' || echo '$(srcdir)/'`$(SRC)/order_tree.c

order_tree.obj: $(SRC)/order_tree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT order_tree.obj -MD -MP -MF $(DEPDIR)/order_tree.Tpo -c -o order_tree.obj `if test -f '$(SRC)/order_tree.c'; then $(CYGPATH_W) '$(SRC)/order_tree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/order_tree.c'; fi`
	$(am__mv) $(DEPDIR)/order_tree.Tpo $(DEPDIR)/order_tree.Po
#	source='$(SRC)/order_tree.c' object='order_tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o order_tree.obj `if test -f '$(SRC)/order_tree.c'; then $(CYGPATH_W) '$(SRC)/order_tree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/order_tree.c'; fi`

readline.o: $(SRC)/readline.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT readline.o -MD -MP -MF $(DEPDIR)/readline.Tpo -c -o readline.o `test -f '$(SRC)/readline.c' || echo '$(srcdir)/'`$(SRC)/readline.c
	$(am__mv) $(DEPDIR)/readline.Tpo $(DEPDIR)/readline.Po
#	source='$(SRC)/readline.c' object='readline.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o readline.o `test -f '$(SRC)/readline.c' || echo '$(srcdir)/'`$(SRC)/readline.c

readline.obj: $(SRC)/readline.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT readline.obj -MD -MP -MF $(DEPDIR)/readline.Tpo -c -o readline.obj `if test -f '$(SRC)/readline.c'; then $(CYGPATH_W) '$(SRC)/readline.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/readline.c'; fi`
	$(am__mv) $(DEPDIR)/readline.Tpo $(DEPDIR)/readline.Po
#	source='$(SRC)/readline.c' object='readline.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o readline.obj `if test -f '$(SRC)/readline.c'; then $(CYGPATH_W) '$(SRC)/readline.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/readline.c'; fi`

subtree.o: $(SRC)/subtree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT subtree.o -MD -MP -MF $(DEPDIR)/subtree.Tpo -c -o subtree.o `test -f '$(SRC)/subtree.c' || echo '$(srcdir)/'`$(SRC)/subtree.c
	$(am__mv) $(DEPDIR)/subtree.Tpo $(DEPDIR)/subtree.Po
#	source='$(SRC)/subtree.c' object='subtree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o subtree.o `test -f '$(SRC)/subtree.c' || echo '$(srcdir)/'`$(SRC)/subtree.c

subtree.obj: $(SRC)/subtree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT subtree.obj -MD -MP -MF $(DEPDIR)/subtree.Tpo -c -o subtree.obj `if test -f '$(SRC)/subtree.c'; then $(CYGPATH_W) '$(SRC)/subtree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/subtree.c'; fi`
	$(am__mv) $(DEPDIR)/subtree.Tpo $(DEPDIR)/subtree.Po
#	source='$(SRC)/subtree.c' object='subtree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o subtree.obj `if test -f '$(SRC)/subtree.c'; then $(CYGPATH_W) '$(SRC)/subtree.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/subtree.c'; fi`

svg_graph_radial.o: $(SRC)/svg_graph_radial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph_radial.o -MD -MP -MF $(DEPDIR)/svg_graph_radial.Tpo -c -o svg_graph_radial.o `test -f '$(SRC)/svg_graph_radial.c' || echo '$(srcdir)/'`$(SRC)/svg_graph_radial.c
	$(am__mv) $(DEPDIR)/svg_graph_radial.Tpo $(DEPDIR)/svg_graph_radial.Po
#	source='$(SRC)/svg_graph_radial.c' object='svg_graph_radial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph_radial.o `test -f '$(SRC)/svg_graph_radial.c' || echo '$(srcdir)/'`$(SRC)/svg_graph_radial.c

svg_graph_radial.obj: $(SRC)/svg_graph_radial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph_radial.obj -MD -MP -MF $(DEPDIR)/svg_graph_radial.Tpo -c -o svg_graph_radial.obj `if test -f '$(SRC)/svg_graph_radial.c'; then $(CYGPATH_W) '$(SRC)/svg_graph_radial.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph_radial.c'; fi`
	$(am__mv) $(DEPDIR)/svg_graph_radial.Tpo $(DEPDIR)/svg_graph_radial.Po
#	source='$(SRC)/svg_graph_radial.c' object='svg_graph_radial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph_radial.obj `if test -f '$(SRC)/svg_graph_radial.c'; then $(CYGPATH_W) '$(SRC)/svg_graph_radial.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph_radial.c'; fi`

svg_graph.o: $(SRC)/svg_graph.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph.o -MD -MP -MF $(DEPDIR)/svg_graph.Tpo -c -o svg_graph.o `test -f '$(SRC)/svg_graph.c' || echo '$(srcdir)/'`$(SRC)/svg_graph.c
	$(am__mv) $(DEPDIR)/svg_graph.Tpo $(DEPDIR)/svg_graph.Po
#	source='$(SRC)/svg_graph.c' object='svg_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph.o `test -f '$(SRC)/svg_graph.c' || echo '$(srcdir)/'`$(SRC)/svg_graph.c

svg_graph.obj: $(SRC)/svg_graph.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph.obj -MD -MP -MF $(DEPDIR)/svg_graph.Tpo -c -o svg_graph.obj `if test -f '$(SRC)/svg_graph.c'; then $(CYGPATH_W) '$(SRC)/svg_graph.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph.c'; fi`
	$(am__mv) $(DEPDIR)/svg_graph.Tpo $(DEPDIR)/svg_graph.Po
#	source='$(SRC)/svg_graph.c' object='svg_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph.obj `if test -f '$(SRC)/svg_graph.c'; then $(CYGPATH_W) '$(SRC)/svg_graph.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph.c'; fi`

svg_graph_ortho.o: $(SRC)/svg_graph_ortho.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph_ortho.o -MD -MP -MF $(DEPDIR)/svg_graph_ortho.Tpo -c -o svg_graph_ortho.o `test -f '$(SRC)/svg_graph_ortho.c' || echo '$(srcdir)/'`$(SRC)/svg_graph_ortho.c
	$(am__mv) $(DEPDIR)/svg_graph_ortho.Tpo $(DEPDIR)/svg_graph_ortho.Po
#	source='$(SRC)/svg_graph_ortho.c' object='svg_graph_ortho.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph_ortho.o `test -f '$(SRC)/svg_graph_ortho.c' || echo '$(srcdir)/'`$(SRC)/svg_graph_ortho.c

svg_graph_ortho.obj: $(SRC)/svg_graph_ortho.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT svg_graph_ortho.obj -MD -MP -MF $(DEPDIR)/svg_graph_ortho.Tpo -c -o svg_graph_ortho.obj `if test -f '$(SRC)/svg_graph_ortho.c'; then $(CYGPATH_W) '$(SRC)/svg_graph_ortho.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph_ortho.c'; fi`
	$(am__mv) $(DEPDIR)/svg_graph_ortho.Tpo $(DEPDIR)/svg_graph_ortho.Po
#	source='$(SRC)/svg_graph_ortho.c' object='svg_graph_ortho.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o svg_graph_ortho.obj `if test -f '$(SRC)/svg_graph_ortho.c'; then $(CYGPATH_W) '$(SRC)/svg_graph_ortho.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/svg_graph_ortho.c'; fi`

xml_utils.o: $(SRC)/xml_utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xml_utils.o -MD -MP -MF $(DEPDIR)/xml_utils.Tpo -c -o xml_utils.o `test -f '$(SRC)/xml_utils.c' || echo '$(srcdir)/'`$(SRC)/xml_utils.c
	$(am__mv) $(DEPDIR)/xml_utils.Tpo $(DEPDIR)/xml_utils.Po
#	source='$(SRC)/xml_utils.c' object='xml_utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xml_utils.o `test -f '$(SRC)/xml_utils.c' || echo '$(srcdir)/'`$(SRC)/xml_utils.c

xml_utils.obj: $(SRC)/xml_utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xml_utils.obj -MD -MP -MF $(DEPDIR)/xml_utils.Tpo -c -o xml_utils.obj `if test -f '$(SRC)/xml_utils.c'; then $(CYGPATH_W) '$(SRC)/xml_utils.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/xml_utils.c'; fi`
	$(am__mv) $(DEPDIR)/xml_utils.Tpo $(DEPDIR)/xml_utils.Po
#	source='$(SRC)/xml_utils.c' object='xml_utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xml_utils.obj `if test -f '$(SRC)/xml_utils.c'; then $(CYGPATH_W) '$(SRC)/xml_utils.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/xml_utils.c'; fi`

node_pos_alloc.o: $(SRC)/node_pos_alloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT node_pos_alloc.o -MD -MP -MF $(DEPDIR)/node_pos_alloc.Tpo -c -o node_pos_alloc.o `test -f '$(SRC)/node_pos_alloc.c' || echo '$(srcdir)/'`$(SRC)/node_pos_alloc.c
	$(am__mv) $(DEPDIR)/node_pos_alloc.Tpo $(DEPDIR)/node_pos_alloc.Po
#	source='$(SRC)/node_pos_alloc.c' object='node_pos_alloc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o node_pos_alloc.o `test -f '$(SRC)/node_pos_alloc.c' || echo '$(srcdir)/'`$(SRC)/node_pos_alloc.c

node_pos_alloc.obj: $(SRC)/node_pos_alloc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT node_pos_alloc.obj -MD -MP -MF $(DEPDIR)/node_pos_alloc.Tpo -c -o node_pos_alloc.obj `if test -f '$(SRC)/node_pos_alloc.c'; then $(CYGPATH_W) '$(SRC)/node_pos_alloc.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/node_pos_alloc.c'; fi`
	$(am__mv) $(DEPDIR)/node_pos_alloc.Tpo $(DEPDIR)/node_pos_alloc.Po
#	source='$(SRC)/node_pos_alloc.c' object='node_pos_alloc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o node_pos_alloc.obj `if test -f '$(SRC)/node_pos_alloc.c'; then $(CYGPATH_W) '$(SRC)/node_pos_alloc.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/node_pos_alloc.c'; fi`

tree_models.o: $(SRC)/tree_models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tree_models.o -MD -MP -MF $(DEPDIR)/tree_models.Tpo -c -o tree_models.o `test -f '$(SRC)/tree_models.c' || echo '$(srcdir)/'`$(SRC)/tree_models.c
	$(am__mv) $(DEPDIR)/tree_models.Tpo $(DEPDIR)/tree_models.Po
#	source='$(SRC)/tree_models.c' object='tree_models.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tree_models.o `test -f '$(SRC)/tree_models.c' || echo '$(srcdir)/'`$(SRC)/tree_models.c

tree_models.obj: $(SRC)/tree_models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tree_models.obj -MD -MP -MF $(DEPDIR)/tree_models.Tpo -c -o tree_models.obj `if test -f '$(SRC)/tree_models.c'; then $(CYGPATH_W) '$(SRC)/tree_models.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/tree_models.c'; fi`
	$(am__mv) $(DEPDIR)/tree_models.Tpo $(DEPDIR)/tree_models.Po
#	source='$(SRC)/tree_models.c' object='tree_models.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tree_models.obj `if test -f '$(SRC)/tree_models.c'; then $(CYGPATH_W) '$(SRC)/tree_models.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC)/tree_models.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) $(check_HEADERS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	ctags distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am

export SRCDIR

showsrc:
	@echo $(srcdir)

clean-local:
	$(RM) *.out

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
